openapi: 3.0.3
info:
  title: Music band service REST endpoints
  description: The service manages a collection of objects. Music Band objects must be stored in the collection.
  version: 1.0.0
#servers:
#  - url: 'https://localhost:45382/api/v1'
paths:
  # CRUD
  /musicBands:
    get:
      summary: Get list of Music Bands
      description: Get list of Music Bands
      operationId: getMusicBands
      parameters:
        - name: sort
          in: query
          description: Array of fields that are used for sorting. The "-" sign means sorting in descending order. If queries and deletion order are provided for one field (with and without "-"), an error response will be returned.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              default: id
              enum:
                - id
                - name
                - coordinates.x
                - coordinates.y
                - creationDate
                - numberOfParticipants
                - description
                - genre
                - label.name
                - -id
                - -name
                - -coordinates.x
                - -coordinates.y
                - -creationDate
                - -numberOfParticipants
                - -description
                - -genre
                - -label.name
        - name: filter
          in: query
          required: false
          description: Array of fields used for filtering. Each element must contain the name of the music band and the filtering method in parentheses, as well as the value that will be used for filtering. If the value type is incorrect, an error response will be returned.
          schema:
            type: array
            items:
              type: string
              example: id[eq]=1
              pattern: '^(id|name|coordinates\.x|coordinates\.y|creationDate|numberOfParticipants|description|genre|label\.name)\[(eq|ne|gt|lt|lte|gte)\]=.+$'
          style: deepObject
          explode: true
        - name: page
          in: query
          required: false
          description: Specifies the page number to be paginated. If used without the "pageSize" parameter, the page size will be 10. If none of the parameters "page" or "pageSize" is used, then all Flats will be returned.
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: pageSize
          in: query
          required: false
          description: The specified page size for pagination. If used without the "page" parameter, the first page will be displayed. If none of the parameters "page" or "pageSize" is used, then all Flats will be returned.
          schema:
            type: integer
            default: 10
            minimum: 1
        - name: nameSubstring
          in: path
          required: false
          description: Substring of the name to search
          schema:
            type: string
            example: My lovely
      tags:
        - Catalog
      responses:
        '200':
          description: Successful response
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/MusicBandsAllFieldsSchema'
        '400':
            description: Invalid query param
            content:
                application/xml:
                  schema:
                    $ref: '#/components/schemas/HTTPBadRequestError'
        '422':
          description: Validation error
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPInternalError'
    post:
      summary: Add new music band
      description: Add new music band
      operationId: addMusicBand
      tags:
        - Catalog
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/MusicBandCreationSchema'
      responses:
        '200':
          description: Returns the music band that was just added
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/MusicBandAllFieldsSchema'
        '400':
          description: Invalid query param
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPBadRequestError'
        '422':
          description: Validation error
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPInternalError'
  /musicBands/{id}:
    get:
      summary: Get existing music band by id
      description: Get existing music band by id
      operationId: getMusicBand
      parameters:
        - name: id
          in: path
          required: true
          description: Music band id to find
          schema:
            type: integer
            format: int64
            minimum: 0
            exclusiveMinimum: true
            example: 1
      tags:
        - Catalog
      responses:
        '200':
          description: Returns music band by id
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/MusicBandAllFieldsSchema'
        '400':
          description: Invalid query param
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPBadRequestError'
        '404':
          description: Object not found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPNotFoundError'
        '422':
          description: Validation error
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPInternalError'
    put:
      summary: Update existing music band by id
      description: Update existing music band by id
      operationId: updateMusicBand
      parameters:
        - name: id
          in: path
          required: true
          description: Music Band id to update
          schema:
            type: integer
            format: int64
            minimum: 0
            exclusiveMinimum: true
            example: 1
      tags:
        - Catalog
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/MusicBandCreationSchema'
      responses:
        '200':
          description: Returns an updated music band
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/MusicBandAllFieldsSchema'
        '400':
          description: Invalid query param
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPBadRequestError'
        '404':
          description: Object not found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPNotFoundError'
        '422':
          description: Validation error
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPInternalError'
    delete:
      summary: Delete existing music band by id
      description: Delete existing music band by id
      operationId: deleteMusicBand
      parameters:
        - name: id
          in: path
          required: true
          description: Music band id to delete
          schema:
            type: integer
            format: int64
            minimum: 0
            exclusiveMinimum: true
            example: 1
      tags:
        - Catalog
      responses:
        '204':
          description: The music band was successfully deleted
        '400':
          description: Invalid query param
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPBadRequestError'
        '404':
          description: Object not found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPNotFoundError'
        '422':
          description: Validation error
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPInternalError'

  # Extra operations
  /musicBands/statictic:
    get:
      summary: Get average number of participants for all music bands
      description: Get average number of participants for all music bands
      operationId: getMusicBandsAverageNumberOfParticipants
      tags:
        - Catalog
      responses:
        '200':
          description: Returns the average value of the number of participants
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Statistic'
        '400':
          description: Invalid query param
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPBadRequestError'
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPInternalError'
  /musicBands/groups:
    get:
      summary: Get the number of repetitions for each Name value
      description: Get the number of repetitions for each Name value
      operationId: getNameGroups
      tags:
        - Catalog
      responses:
        '200':
          description: Returns list of numbers of each Name value
          content:
            application/xml:
                schema:
                  $ref: '#/components/schemas/Groups'
        '400':
          description: Invalid query param
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPBadRequestError'
        '422':
          description: Validation error
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/HTTPInternalError'

# Models
components:
  schemas:
    HTTPBadRequestError:
      title: HTTPBadRequestError
      type: object
      properties:
        code:
          type: integer
          example: 400
        detail:
          type: string
          example: Invalid request message framing, or deceptive request routing.

    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        code:
          type: integer
          example: 422
        detail:
          type: string
          example: Validation error

    HTTPNotFoundError:
      title: HTTPNotFoundError
      type: object
      properties:
        code:
          type: integer
          example: 404
        detail:
          type: string
          example: Object not found

    HTTPForbiddenError:
      title: HTTPForbiddenError
      type: object
      properties:
        code:
          type: integer
          example: 403
        detail:
          type: string
          example: Permission denied

    HTTPInternalError:
      title: HTTPInternalError
      type: object
      properties:
        code:
          type: integer
          example: 500
        detail:
          type: string
          example: Something went wrong...

    MusicGenre :
      type: string
      enum:
        - ROCK
        - RAP
        - POST_ROCK
        - PUNK_ROCK
      example: ROCK

    Label:
      type: object
      properties:
        name:
          type: string
          example: National

    Coordinates:
      type: object
      properties:
        x:
          type: number
          format: float
          minimum: -530
          example: 10
        y:
          type: number
          format: double
          example: 12
      required:
        - x
        - y

    MusicBandCreationSchema:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          example: My lovely music band
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        numberOfParticipants:
          type: integer
          format: int32
          minimum: 0
          example: 70
        description:
          type: string
          example: Description of my lovely music band
        genre:
          $ref: '#/components/schemas/MusicGenre'
        label:
          $ref: '#/components/schemas/Label'
      required:
        - name
        - coordinates
        - genre

    MusicBandAllFieldsSchema:
      allOf:
        - $ref: '#/components/schemas/MusicBandCreationSchema'
        - properties:
            id:
              type: integer
              format: int64
              minimum: 0
              exclusiveMinimum: true
              example: 1
              description: unique identifier of music band
            date:
              type: string
              format: date-time
              example: 2022-09-19T00:00:10Z
          required:
            - id

    MusicBandsAllFieldsSchema:
      type: object
      properties:
        musicBandGetResponseDtos:
          type: array
          items:
            $ref: '#/components/schemas/MusicBandAllFieldsSchema'
        page:
          type: integer
          example: 0
          default: 0
        pageSize:
          type: integer
          example: 20
          default: 20
        totalPages:
          type: integer
          example: 1
          default: 1
        totalCount:
          type: integer
          example: 1

    Group:
      title: Group
      type: object
      properties:
        name:
          type: string
          minLength: 1
          example: My lovely music band
        number:
          type: integer
          format: int32
          example: 1
      required:
        - name

    Groups:
      title: Groups
      type: object
      properties:
        Group:
          type: array
          items:
            $ref: '#/components/schemas/Group'
          example:
            - name: XXX
              number: 0
            - name: YYY
              number: 1

    Statistic:
      type: object
      properties:
        average:
          type: integer
          example: 20
